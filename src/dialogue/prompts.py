START_PROMPT = "¬°Hola! Soy el asistente de ausencias. ¬øEn qu√© te puedo dar una mano hoy? üôÇ"

PROMPTS = {
	"crear_aviso": {
		"legajo": "¬øMe pas√°s tu legajo? (solo n√∫meros/letras) üÜî",
		"motivo": (
			"""Eleg√≠ el motivo:
	- art
	- enfermedad_inculpable
	- enfermedad_familiar
	- fallecimiento
	- matrimonio
	- nacimiento
	- paternidad
	- permiso_gremial"""
		),
		"fecha_inicio": "¬øDesde qu√© fecha quer√©s iniciar el aviso? Pod√©s decir 'hoy', 'ma√±ana' o pasar la fecha (YYYY-MM-DD / DD/MM/AAAA) üìÖ",
		"duracion_estimdays": "¬øPor cu√°ntos d√≠as estim√°s la ausencia? (n√∫mero entero) üìè",
		"vinculo_familiar": "Si es por enfermedad_familiar, indic√° el v√≠nculo: padre, madre, hijo/a, c√≥nyuge u otro üë™",
	},
	"adjuntar_certificado": {
		"id_aviso": "Decime el ID del aviso o, si no lo ten√©s, tu legajo y la fecha de inicio üîé",
		"adjunto_certificado": "Si lo ten√©s a mano, adjunt√° el documento (PDF/JPG/PNG). Tambi√©n pod√©s decir 'adjunto' para enviarlo luego üìé",
	},
	"consultar_estado": {
		"id_aviso": "¬øMe compart√≠s el ID del aviso o tu legajo para buscarlo? üóÇÔ∏è",
	},
	"modificar_aviso": {
		"duracion_estimdays": "¬øA cu√°ntos d√≠as quer√©s cambiar la duraci√≥n estimada? ‚úèÔ∏è",
	},
	"cancelar_aviso": {
		"confirm": "¬øConfirm√°s que quer√©s cancelar el aviso? Escrib√≠ CONFIRMAR para avanzar ‚ùå",
	},
}

def resumen_corto(facts: dict) -> str:
	mot = facts.get("motivo")
	ini = facts.get("fecha_inicio")
	dur = facts.get("duracion_estimdays")
	est = facts.get("estado_aviso")
	flag = " ¬∑ fuera_de_termino" if facts.get("fuera_de_termino") else ""
	ida = facts.get("id_aviso")
	if ida:
		return f"ID: {ida} ¬∑ Motivo: {mot} ¬∑ Inicio: {ini} ¬∑ D√≠as: {dur} ¬∑ Estado: {est}{flag}"
	return f"Motivo: {mot} ¬∑ Inicio: {ini} ¬∑ D√≠as: {dur} ¬∑ Estado: {est}{flag}"


# --- Helpers de UX (tono es-AR, emojis sutiles) ---

def msg_saludo() -> str:
	"""Saludo inicial amable en es-AR.

	No altera la l√≥gica; solo texto de presentaci√≥n.
	"""
	return "¬°Hola! üëã Soy el asistente de ausencias. Te acompa√±o para crear avisos, adjuntar certificados o consultar estados."


def msg_pedir_legajo() -> str:
	return "¬øMe pas√°s tu legajo? (solo n√∫meros/letras) üÜî"


def msg_pedir_motivo(opciones: list[str] | tuple[str, ...]) -> str:
	"""Pide motivo mostrando lista cerrada.

	Se espera que 'opciones' use los valores del dominio (glosario). Si se desea mostrar
	etiquetas m√°s amigables, mantener compatibilidad con el normalizador.
	"""
	if not opciones:
		# A CONFIRMAR: si no hay opciones provistas desde docs/glosario
		opciones = [
			"art",
			"enfermedad_inculpable",
			"enfermedad_familiar",
			"fallecimiento",
			"matrimonio",
			"nacimiento",
			"paternidad",
			"permiso_gremial",
		]
	items = "\n".join(f"- {o}" for o in opciones)
	return f"Eleg√≠ el motivo:\n{items}"


def msg_pedir_fecha() -> str:
	return "¬øDesde qu√© fecha quer√©s iniciar el aviso? Decime 'hoy', 'ma√±ana' o una fecha (YYYY-MM-DD / DD/MM/AAAA) üìÖ"


def msg_pedir_dias() -> str:
	return "¬øCu√°ntos d√≠as estim√°s de ausencia? Indic√° un n√∫mero entero (p. ej., 1, 3, 10) üìè"


def msg_pedir_certificado(tipo: str | None) -> str:
	"""Pide adjuntar certificado del tipo indicado.

	'tipo' deber√≠a provenir del dominio (p. ej., 'certificado_medico', 'acta_defuncion').
	"""
	t = tipo or "certificado"
	return (
		f"Si ten√©s el {t} a mano, pod√©s adjuntarlo ahora (PDF/JPG/PNG). "
		"Si prefer√≠s, pod√©s enviarlo m√°s tarde. üìé"
	)


def msg_resumen(facts: dict, traza: str | None = None) -> str:
	"""Resumen amigable del aviso a partir de hechos + una breve explicaci√≥n opcional.

	No modifica los hechos ni la l√≥gica; solo formatea el mensaje.
	"""
	mot = facts.get("motivo") or "‚Äî"
	ini = facts.get("fecha_inicio") or "‚Äî"
	dur = facts.get("duracion_estimdays") or "‚Äî"
	est = facts.get("estado_aviso") or "‚Äî"
	ida = facts.get("id_aviso")
	flag = " ‚è∞ fuera de t√©rmino" if facts.get("fuera_de_termino") else ""
	lineas: list[str] = []
	if ida:
		lineas.append(f"ID aviso: {ida}")
	lineas.append(f"Motivo: {mot}")
	lineas.append(f"Inicio: {ini}")
	lineas.append(f"D√≠as (estimado): {dur}")
	lineas.append(f"Estado: {est}{flag}")
	if traza:
		lineas.append(f"‚ÑπÔ∏è {traza}")
	return "\n".join(lineas)


def msg_confirmar(resumen: str) -> str:
	return (
		"¬øConfirmamos estos datos? ‚úÖ\n"
		f"{resumen}\n"
		"Eleg√≠ 'Confirmar' o 'Editar'."
	)


def msg_ok_creado(id_aviso: str | int | None) -> str:
	if id_aviso is None:
		return "¬°Listo! Tu aviso qued√≥ creado üéâ"
	return f"¬°Listo! Tu aviso #{id_aviso} qued√≥ creado üéâ"


def msg_cierre_con_contexto(facts: dict) -> str:
	"""Mensaje de cierre con tono contextual seg√∫n motivo.

	- nacimiento: felicitaciones
	- fallecimiento: condolencias
	- otros: cierre est√°ndar
	"""
	mot = (facts.get("motivo") or "").lower()
	if mot == "fallecimiento":
		# Mensaje sobrio, sin emoji
		return (
			"Tu aviso fue registrado.\n"
			"Lamentamos tu p√©rdida. RRHH se pondr√° en contacto para acompa√±arte con el tr√°mite."
		)
	base = msg_ok_creado(facts.get("id_aviso"))
	if mot == "nacimiento":
		return base + "\n¬°Felicitaciones! RRHH se pondr√° en contacto para explicar el tr√°mite."
	return base + "\nRRHH se pondr√° en contacto para confirmarlo."


def msg_error(message: str) -> str:
	return f"Uy‚Ä¶ hubo un problema: {message} ‚ö†Ô∏è Intent√° nuevamente o pedime ayuda."
